var documenterSearchIndex = {"docs":
[{"location":"poisson/#Poisson-2D","page":"Poisson 2D - 1 Phase","title":"Poisson 2D","text":"","category":"section"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"This example demonstrates how to solve a 2D diffusion (Poisson) equation inside a circular region.","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"Here, we create a Cartesian mesh of size nx × ny, and define a circle inside that mesh. The function identifies cells that lie inside, outside, or on the circular boundary.","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"# Build mesh\nnx, ny = 160, 160\nx0, y0 = 0.0, 0.0\nlx, ly = 4., 4.\nmesh = CartesianMesh((nx, ny), (lx, ly), (x0, y0))\n\n# Define the body\nradius, center = ly/4, (2.01, 2.01)\ncircle = Body(\n            (x,y,_=0) -> (sqrt((x-center[1])^2 + (y-center[2])^2) - radius),\n            (x,y,_)   -> (x,y),\n            ((x0,lx), (y0,ly)),\n            false)","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"This creates the discrete operators needed to assemble and solve the diffusion equation based on the mesh and the circular domain.","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"# Define capacity/operator\ncapacity = Capacity(circle, mesh)\noperator = DiffusionOps(capacity.A, capacity.B, capacity.V, capacity.W, (nx+1, ny+1))","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"We impose Dirichlet boundary conditions of 0.0 on all edges, define a constant source term f(x,y)=4.0, and set the diffusion coefficient K=1.0.","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"bc_interface = Dirichlet(0.0)\nbc_b = BorderConditions(Dict(\n    :left   => Dirichlet(0.0),\n    :right  => Dirichlet(0.0),\n    :top    => Dirichlet(0.0),\n    :bottom => Dirichlet(0.0)))\n\nf = (x,y,_)->4.0\nK = 1.0\nphase = Phase(capacity, operator, f, K)","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"The solver is constructed and run using a direct solver (the “backslash” operator). The numerical solution is stored in solver.x.","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"solver = DiffusionSteadyMono(phase, bc_b, bc_interface)\nsolve_DiffusionSteadyMono!(solver, phase; method=Base.:\\)","category":"page"},{"location":"poisson/","page":"Poisson 2D - 1 Phase","title":"Poisson 2D - 1 Phase","text":"These plots show the error distribution in log scale and the L1/L2 norms for different mesh sizes, demonstrating the convergence characteristics of the solver. (Image: ) (Image: ) (Image: )","category":"page"},{"location":"#Fliwer-Documentation","page":"Fliwer Documentation","title":"Fliwer Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Fliwer Documentation","title":"Introduction","text":"","category":"section"},{"location":"","page":"Fliwer Documentation","title":"Fliwer Documentation","text":"Julia Implementation of Cut-Cell method for (now) :","category":"page"},{"location":"","page":"Fliwer Documentation","title":"Fliwer Documentation","text":"Scalar Elliptic Problems\nScalar Parabolic Problems\nScalar Advection-Diffusion-Reaction Problems\nSolid Moving Boundaries\nMonophasic or Diphasic Problems\nDarcy Flow Solver","category":"page"},{"location":"","page":"Fliwer Documentation","title":"Fliwer Documentation","text":"Under development : ","category":"page"},{"location":"","page":"Fliwer Documentation","title":"Fliwer Documentation","text":"Fully Coupled Navier-Stokes Solver\nStreamfunction–vorticity solver\nDeforming Interface\nPreconditionning","category":"page"}]
}
